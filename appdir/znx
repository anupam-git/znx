#! /bin/sh

# -- Exit on errors.

set -e


# -- Argument handling.

COMMAND=$1
DEVICE=$2
IMAGE=$3
URL=$4


# -- Settings.

PREFIX=$(dirname $(readlink -f $0))

ACTIVE_IMAGE=IMAGE.0
BACKUP_IMAGE=IMAGE.0.zs-old

STORE=/STORE
TMP_MNT=$(mktemp -d)


# -- Commit that generated this build.

VERSION=@TRAVIS_COMMIT@


# -- Helper functions.

_e () { printf %b "znx: \e[31mError:\e[0m $@\n" >& 2; exit 1; }
_p () { printf %b "znx: $@\n"; }
_arg_n_chk () { [ $1 -eq $2 ] || _e "Bad command: wrong number of arguments."; }

_mount () {

	ZNX_DATA=$(lsblk -no PATH,PARTLABEL $DEVICE | grep ZNX_DATA | cut -d ' ' -f 1)

	[ ${#ZNX_DATA} -eq 0 ] &&
		_e "Device has not been intialized."

	mount $ZNX_DATA $TMP_MNT

}

_prepare_esp () {

	mkfs.vfat -F 32 $1
	mount $1 $TMP_MNT

	mkdir -p \
		$TMP_MNT/efi/boot \
		$TMP_MNT/boot/grub

	cp $PREFIX/bootx64.efi $TMP_MNT/efi/boot

	cp -r \
		$PREFIX/themes \
		$PREFIX/grub.cfg \
		$TMP_MNT/boot/grub

}

_on_exit () {

	cd /

	while mountpoint -q $TMP_MNT; do
		umount -f $TMP_MNT
	done

	rm -rf $TMP_MNT

	[ ${#EXIT_MSG} -gt 0 ] &&
		_p "$EXIT_MSG"

}


# -- Always perform a cleanup on exit.

trap _on_exit EXIT HUP INT TERM


# -- Sanity checks.

[ $# -eq 0 ] &&
	_e "No command given!"

[ $(id -u) -eq 0 ] ||
	_e "This program MUST be ran as the super user."

[ -b $DEVICE ] ||
	_e "$DEVICE is not a block device"

[ ${#IMAGE} -gt 0 ] && {
	printf %s $IMAGE | grep -qE '^[a-zA-Z0-9._]+/[a-zA-Z0-9._]+$' ||
		_e "Bad image name (must match '^[a-zA-Z0-9._]+/[a-zA-Z0-9._]+$')."
}


# -- Initialize the device.

_znx_init () {

	_arg_n_chk $# 1

	grep -q $DEVICE /proc/mounts &&
		_e "$DEVICE is mounted! Unmount it before continuing."

	_p "Wiping $DEVICE. Please wait."

	wipefs -af $DEVICE
		sgdisk -Z \
		-n 1::64M -t 1:EF00 -c 1:ZNX_BOOT \
		-N 2 -t 2:8300 -c 2:ZNX_DATA $DEVICE

	while [ ${#ZNX_DATA} -eq 0 -o ${#ZNX_BOOT} -eq 0 ]; do
		sleep 1
		ZNX_BOOT=$(lsblk -no PATH,PARTLABEL $DEVICE | grep ZNX_BOOT | cut -d ' ' -f 1)
		ZNX_DATA=$(lsblk -no PATH,PARTLABEL $DEVICE | grep ZNX_DATA | cut -d ' ' -f 1)
	done

	# -- Create the filesystems.

	_prepare_esp $ZNX_BOOT
	mkfs.btrfs -f $ZNX_DATA

	EXIT_MSG="Operation successful. Device is ready."

}


# -- Attempt to restore a broken ESP.

_znx_restore_esp () {

	_arg_n_chk $# 1

	_p "Restoring the ESP on $DEVICE."

	ZNX_BOOT=$(lsblk -no PATH,PARTLABEL $DEVICE | grep ZNX_BOOT | cut -d ' ' -f 1)

	_prepare_esp $ZNX_BOOT

	EXIT_MSG="Successfully restored the ESP on $DEVICE."

}


# -- Deploy an image.

_znx_deploy () {

	_arg_n_chk $# 3
	_mount
	_p "Deploying $IMAGE."

	[ -d $TMP_MNT/$STORE/$IMAGE ] &&
		_e "$IMAGE is already deployed."

	mkdir -p $TMP_MNT/$STORE/$IMAGE/DATA

	(

		# -- Delete leftovers if the deployment is interrupted.
		# -- See issue #23 (https://github.com/Nitrux/znx/issues/23).

		trap "rm -rf $TMP_MNT/$STORE/${IMAGE%%\/*}" INT

		[ -f "$URL" ] &&
			cp "$URL" $TMP_MNT/$STORE/$IMAGE/$ACTIVE_IMAGE ||
			axel -a -o $TMP_MNT/$STORE/$IMAGE/$ACTIVE_IMAGE "$URL"

	) || _e "Failed to deploy $IMAGE."

	EXIT_MSG="Successfully deployed $IMAGE."

}


# -- Update an image.

_znx_update () {

	_arg_n_chk $# 2
	_mount
	_p "Updating $IMAGE."

	cd $TMP_MNT/$STORE/$IMAGE ||
		_e "\e[32m$IMAGE\e[0m is not deployed."

	UPDATE_URL=$(dd if=$ACTIVE_IMAGE bs=1 skip=33651 count=512 2> /dev/null)

	[ ${#UPDATE_URL} -eq 0 ] &&
		_e "Unable to gather update information from $IMAGE. Aborting update."

	zsync ${UPDATE_URL#zsync|} -o $ACTIVE_IMAGE ||
		_e "Failed to update $IMAGE."

	EXIT_MSG="Successfully updated $IMAGE."

}


# -- Revert an update.

_znx_revert () {

	_arg_n_chk $# 2
	_mount
	_p "Reverting last update of $IMAGE."

	cd $TMP_MNT/$STORE/$IMAGE ||
		_e "$IMAGE is not deployed."

	mv -f $BACKUP_IMAGE $ACTIVE_IMAGE ||
		_e "Couldn't perform a rollback on $IMAGE."

	EXIT_MSG="Sucessfully performed rollback on $IMAGE."

}


# -- Clear all user data for the specified image.

_znx_reset () {

	_arg_n_chk $# 2
	_mount
	_p "Resetting $IMAGE."

	rm -rf $TMP_MNT/$STORE/$IMAGE/DATA/* ||
		_e "Failed to reset $IMAGE."

	EXIT_MSG="Successfully resetted $IMAGE."

}


# -- Delete the backup image that is created after an update.

_znx_clean () {

	_arg_n_chk $# 2
	_mount
	_p "Cleaning $IMAGE."

	cd $TMP_MNT/$STORE/$IMAGE ||
		_e "$IMAGE is not deployed."

	rm -f $BACKUP_IMAGE
	EXIT_MSG="Sucessfully cleaned $IMAGE."

}


# -- Remove the specified image.

_znx_remove () {

	_arg_n_chk $# 2
	_mount
	_p "Removing $IMAGE."

	[ -d $TMP_MNT/$STORE/$IMAGE ] ||
		_e "$IMAGE is not deployed."

	rm -rf $TMP_MNT/$STORE/$IMAGE
	EXIT_MSG="Successfully removed $IMAGE."

}


# -- Show statistics about the given image.

_znx_stats () {

	_arg_n_chk $# 2
	_mount

	cd $TMP_MNT/$STORE/$IMAGE ||
		_e "$IMAGE is not deployed."

	printf "Image size: $(ls -sh $ACTIVE_IMAGE | cut -d ' ' -f 1).\n"
	printf "Last update: $(date -u -r $ACTIVE_IMAGE).\n"
	printf "Backup size: $({ ls -sh $BACKUP_IMAGE 2> /dev/null || echo 0; } | cut -d ' ' -f 1).\n"

}


# -- List the deployed images.

_znx_list () {

	_arg_n_chk $# 1
	_mount

	[ -d $TMP_MNT/$STORE ] &&
		cd $TMP_MNT/$STORE ||
		exit

	ls -1 -d */*

}


# -- Option handling.

case $COMMAND in

	-h|--help|help) cat $PREFIX/HELP; exit;;
	-v|--version|version) printf "$VERSION\n"; exit;;

esac


# -- Run the requested command.

_znx_$COMMAND $DEVICE $IMAGE $URL
