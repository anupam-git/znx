#! /bin/sh

# -- Exit on errors.

set -e


# -- Argument handling.

COMMAND=$1
DEVICE=$2
IMAGE=$3
URL=$4


# -- Default file names.

ACTIVE_IMAGE=IMAGE.0
BACKUP_IMAGE=IMAGE.0.zs-old


# -- Images location.

STORE=/STORE


# -- Commit that generated this build.

VERSION=@TRAVIS_COMMIT@


# -- Prepare the mountpoint.

TMP_MNT=$(mktemp -d)


# -- Help text.

HELP=\
"Usage: znx <option | command>

Options:

  -v, --version                          Print the commit hash that generated this binary.
  -h, --help                             Print this help.

Commands:

  init <device>                           Initialize the storage device.
  restore_esp <device>                    Restore the ESP (EFI System Partition) of the given device.
  deploy <device> <image> <URL | path>    Deploy an image on a storage device.
  update <device> <image>                 Update the specified image.
  revert <device> <image>                 Revert to the previous version of the image.
  clean <device> <image>                  Remove the backup that is created during an update.
  reset <device> <image>                  Delete all user data of the specified image.
  remove <device> <image>                 Remove the specified image.
  stats <device> <image>                  Show statistics about the provided image.
  list <device>                           List the deployed images.

Examples:

  Initialize a device:
  - znx init /dev/sdX

  Restore the ESP of a device:
  - znx restore /dev/sdX

  Deploy an image:
  - znx deploy /dev/sdX vendor/release http://foo.bar/image.iso
  - znx deploy /dev/sdX vendor/release /path/to/image.iso

  Update an image:
  - znx update /dev/sdX vendor/release

  Revert an update (downgrade):
  - znx revert /dev/sdX vendor/release

  Delete the backup of an image:
  - znx clean /dev/sdX vendor/release

  Reset an image to its original state:
  - znx reset /dev/sdX vendor/release

  Remove an image:
  - znx remove /dev/sdX vendor/release

  Show statistics about an image:
  - znx stats /dev/sdX vendor/release

  List the deployed images on a device:
  - znx list /dev/sdX

"


# -- Helper functions.

error () {
	printf %b "znx: \e[31mError:\e[0m $@\n" >& 2
	exit 1
}

_print () {
	printf %b "znx: $@\n"
}

_mount () {

	ZNX_DATA=$(lsblk -no PATH,PARTLABEL $DEVICE | grep ZNX_DATA | cut -d ' ' -f 1)

	[ ${#ZNX_DATA} -eq 0 ] &&
		error "Device has not been intialized."

	mount $ZNX_DATA $TMP_MNT

}

_prepare_esp () {

	PREFIX=$(dirname $(readlink -f $0))

	mkfs.vfat -F 32 $1
	mount $1 $TMP_MNT

	mkdir -p \
		$TMP_MNT/efi/boot \
		$TMP_MNT/boot/grub

	cp $PREFIX/bootx64.efi $TMP_MNT/efi/boot

	cp -r \
		$PREFIX/themes \
		$PREFIX/grub.cfg \
		$TMP_MNT/boot/grub

}

clean () {

	cd /

	while mountpoint -q $TMP_MNT; do
		umount -f $TMP_MNT
	done

	rm -rf $TMP_MNT

	[ ${#EXIT_MSG} -gt 0 ] &&
		_print "$EXIT_MSG"

}


# -- Always perform a cleanup after exiting.

trap clean EXIT HUP INT TERM


# -- Sanity checks.

[ $# -eq 0 ] &&
	error "No command given!"

[ $(id -u) -eq 0 ] || {
	printf "$HELP"
	error "This program MUST be ran as the super user."
}

[ -b $DEVICE ] ||
	error "$DEVICE is not a block device"

[ ${#IMAGE} -gt 0 ] && {
	printf %s $IMAGE | grep -qE '^[a-zA-Z0-9._]+/[a-zA-Z0-9._]+$' ||
		error "The image name must match the regular expression: '^[a-zA-Z0-9._]+/[a-zA-Z0-9._]+$'."
}


# -- Initialize the device.

_znx_init () {

	[ $# -eq 1 ] ||
		error "Bad command: wrong number of arguments."

	grep -q $DEVICE /proc/mounts &&
		error "$DEVICE is mounted! Unmount it before continuing."

	_print "Wiping $DEVICE. Please wait."

	wipefs -af $DEVICE
		sgdisk -Z \
		-n 1::64M -t 1:EF00 -c 1:ZNX_BOOT \
		-N 2 -t 2:8300 -c 2:ZNX_DATA $DEVICE

	while [ ${#ZNX_DATA} -eq 0 -o ${#ZNX_BOOT} -eq 0 ]; do
		sleep 1
		ZNX_BOOT=$(lsblk -no PATH,PARTLABEL $DEVICE | grep ZNX_BOOT | cut -d ' ' -f 1)
		ZNX_DATA=$(lsblk -no PATH,PARTLABEL $DEVICE | grep ZNX_DATA | cut -d ' ' -f 1)
	done

	# -- Create the filesystems.

	_prepare_esp $ZNX_BOOT
	mkfs.btrfs -f $ZNX_DATA

	EXIT_MSG="Operation successful. Device is ready."

}


# -- Attempt to restore a broken ESP.

_znx_restore_esp () {

	[ $# -eq 1 ] ||
		error "Bad command: wrong number of arguments."

	_print "Restoring the ESP on $DEVICE."

	ZNX_BOOT=$(lsblk -no PATH,PARTLABEL $DEVICE | grep ZNX_BOOT | cut -d ' ' -f 1)

	_prepare_esp $ZNX_BOOT

	EXIT_MSG="Successfully restored the ESP on $DEVICE."

}


# -- Deploy an image.

_znx_deploy () {

	[ $# -ne 3 ] &&
		error "Bad command: wrong number of arguments."

	_mount
	_print "Deploying $IMAGE."

	[ -d $TMP_MNT/$STORE/$IMAGE ] &&
		error "$IMAGE is already deployed."

	mkdir -p $TMP_MNT/$STORE/$IMAGE/DATA

	(

		# -- Delete leftovers if the deployment is interrupted.
		# -- See issue #23 (https://github.com/Nitrux/znx/issues/23).

		trap "rm -rf $TMP_MNT/$STORE/${IMAGE%%\/*}" INT

		[ -f $URL ] &&
			cp $URL $TMP_MNT/$STORE/$IMAGE/$ACTIVE_IMAGE ||
			axel -a -o $TMP_MNT/$STORE/$IMAGE/$ACTIVE_IMAGE $URL

	) || error "Failed to deploy $IMAGE."

	EXIT_MSG="Successfully deployed $IMAGE."

}


# -- Update an image.

_znx_update () {

	[ $# -ne 2 ] &&
		error "Bad command: wrong number of arguments."

	_mount
	_print "Updating $IMAGE."

	cd $TMP_MNT/$STORE/$IMAGE ||
		error "\e[32m$IMAGE\e[0m is not deployed."

	UPDATE_URL=$(dd if=$ACTIVE_IMAGE bs=1 skip=33651 count=512 2> /dev/null)

	[ ${#UPDATE_URL} -eq 0 ] &&
		error "Unable to gather update information from $IMAGE. Aborting update."

	zsync ${UPDATE_URL/zsync|} -o $ACTIVE_IMAGE ||
		error "Failed to update $IMAGE."

	EXIT_MSG="Successfully updated $IMAGE."

}


# -- Revert an update.

_znx_revert () {

	[ $# -ne 2 ] &&
		error "Bad command: wrong number of arguments."

	_mount
	_print "Reverting last update of $IMAGE."

	cd $TMP_MNT/$STORE/$IMAGE ||
		error "$IMAGE is not deployed."

	mv -f $BACKUP_IMAGE $ACTIVE_IMAGE ||
		error "Couldn't perform a rollback on $IMAGE."

	EXIT_MSG="Sucessfully performed rollback on $IMAGE."

}


# -- Clear all user data for the specified image.

_znx_reset () {

	[ $# -ne 2 ] &&
		error "Bad command: wrong number of arguments."

	_mount
	_print "Resetting $IMAGE."

	rm -rf $TMP_MNT/$STORE/$IMAGE/DATA/* ||
		error "Failed to reset $IMAGE."

	EXIT_MSG="Successfully resetted $IMAGE."

}


# -- Delete the backup image that is created after an update.

_znx_clean () {

	[ $# -ne 2 ] &&
		error "Bad command: wrong number of arguments."

	_mount
	_print "Cleaning $IMAGE."

	cd $TMP_MNT/$STORE/$IMAGE ||
		error "$IMAGE is not deployed."

	rm -f $BACKUP_IMAGE
	EXIT_MSG="Sucessfully cleaned $IMAGE."

}


# -- Remove the specified image.

_znx_remove () {

	[ $# -ne 2 ] &&
		error "Bad command: wrong number of arguments."

	_mount
	_print "Removing $IMAGE."

	[ -d $TMP_MNT/$STORE/$IMAGE ] ||
		error "$IMAGE is not deployed."

	rm -rf $TMP_MNT/$STORE/$IMAGE
	EXIT_MSG="Successfully removed $IMAGE."

}


# -- Show statistics about the given image.

_znx_stats () {

	[ $# -ne 2 ] &&
		error "Bad command: wrong number of arguments."

	_mount

	cd $TMP_MNT/$STORE/$IMAGE ||
		error "$IMAGE is not deployed."

	printf "Image size: $(ls -sh $ACTIVE_IMAGE | cut -d ' ' -f 1).\n"
	printf "Last update: $(date -u -r $ACTIVE_IMAGE).\n"
	printf "Backup size: $({ ls -sh $BACKUP_IMAGE 2> /dev/null || echo 0; } | cut -d ' ' -f 1).\n"

}


# -- List the deployed images.

_znx_list () {

	[ $# -ne 1 ] &&
		error "Bad command: wrong number of arguments."

	_mount

	[ -d $TMP_MNT/$STORE ] &&
		cd $TMP_MNT/$STORE ||
		exit

	ls -1 -d */*

}


# -- Option handling.

case $1 in

	-h|--help|help) printf "$HELP"; exit ;;
	-v|--version|version) printf "$VERSION\n"; exit ;;

esac


# -- Run the requested command.

_znx_$@
