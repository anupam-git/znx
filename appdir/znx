#! /bin/bash

# -- Exit on errors.

set -e


# -- Argument handling.

COMMAND=$1
DEVICE=$2
IMAGE=$3
URL=$4


# -- Default file names.

ACTIVE_IMAGE=IMAGE.0
BACKUP_IMAGE=IMAGE.0.zs-old


# -- Images location.

STORE=/STORE


# -- Commit that generated this build.

VERSION=@TRAVIS_COMMIT@


# -- Prepare the mountpoint.

TMP_MNT=$(mktemp -d)


# -- Help text.

HELP=\
"Usage: znx <option | command>

Options:

  -v, --version                          Print the commit hash that generated this binary.
  -h, --help                             Print this help.

Commands:

  init <device>                           Initialize the storage device.
  deploy <device> <image> <URL | path>    Deploy an image on a storage device.
  update <device> <image>                 Update the specified image.
  revert <device> <image>                 Revert to the previous version of the image.
  clean <device> <image>                  Remove the backup that is created during an update.
  reset <device> <image>                  Delete all user data of the specified image.
  remove <device> <image>                 Remove the specified image.
  stats <device> <image>                  Show statistics about the provided image.
  list <device>                           List the deployed images.

Examples:

  Initialize a device:
  - znx init /dev/sdX

  Deploy an image:
  - znx deploy /dev/sdX vendor/release http://foo.bar/image.iso
  - znx deploy /dev/sdX vendor/release /path/to/image.iso

  Update an image:
  - znx update /dev/sdX vendor/release

  Revert an update (downgrade):
  - znx revert /dev/sdX vendor/release

  Delete the backup of an image:
  - znx clean /dev/sdX vendor/release

  Reset an image to its original state:
  - znx reset /dev/sdX vendor/release

  Remove an image:
  - znx remove /dev/sdX vendor/release

  Show statistics about an image:
  - znx stats /dev/sdX vendor/release

  See the deployed images on a device:
  - znx list /dev/sdX

"


# -- Helper functions.

error () {
	printf %b "znx: \e[31mError:\e[0m $@\n" >& 2
	exit 1
}

_print () {
	printf %b "znx: $@\n"
}

_mount () {

	for d in $DEVICE*; do

		blkid $d | grep -q ZNX_DATA &&
			mount $d $TMP_MNT

	done

	mountpoint -q $TMP_MNT ||
		error "Device has not been initialized."

}

clean () {

	cd /

	while mountpoint -q $TMP_MNT; do
		umount -f $TMP_MNT
	done

	rm -rf $TMP_MNT

}


# -- Always perform a cleanup after exiting.

trap clean EXIT HUP INT TERM


# -- Sanity checks.

[ $# -eq 0 ] &&
	error "No command given!"

[ $(id -u) -ne 0 ] &&
	error "You are not the super user."

[ -b $DEVICE ] ||
	error "$DEVICE is not a block device"

[ ${#IMAGE} -gt 0 ] && {
	printf %s $IMAGE | grep -qE '^[[:alnum:]_-]+/[[:alnum:]_-]+$' ||
		error "The image name must match the regular expression: '^[[:alnum:]_-]+/[[:alnum:]_-]+$'."
}


# -- Run the specified command.

case $COMMAND in

	init)

		[ $# -eq 2 ] ||
			error "Bad command: wrong number of arguments."

		grep -q $DEVICE /proc/mounts &&
			error "$DEVICE is mounted! Unmount it before continuing."

		PREFIX=$(dirname $(readlink -f $0))

		_print "Wiping $DEVICE. Please wait."

		wipefs -af $DEVICE
		sgdisk -Z \
			-n 1::64M -t 1:EF00 -c 1:ZNX_BOOT \
			-N 2 -t 2:8300 -c 2:ZNX_DATA $DEVICE

		for d in $DEVICE*; do

			# -- Prepare the boot partition.

			blkid $d | grep -q ZNX_BOOT && {

				mkfs.vfat -F 32 $d

				mount $d $TMP_MNT ||
					error "Unable to mount $d! Device initialization failed."

				mkdir -p \
					$TMP_MNT/efi/boot \
					$TMP_MNT/boot/grub

				cp $PREFIX/grub.cfg $TMP_MNT/boot/grub
				cp $PREFIX/bootx64.efi $TMP_MNT/efi/boot
				cp -r $PREFIX/themes $TMP_MNT/boot/grub

			}

			# -- Prepare the data partition.

			blkid $d | grep -q ZNX_DATA &&
				mkfs.btrfs -f $d
				error "Unable to mount $d! Device initialization failed."

		done

		_print "Operation successful. Device is ready."

	;;

	deploy)

		[ $# -ne 4 -o $# -ne 5 ] &&
			error "Bad command: wrong number of arguments."

		_mount
		_print "Deploying $IMAGE."

		mkdir -p $TMP_MNT/$STORE/$IMAGE/DATA

		(

			# -- Delete leftovers if the deployment is interrupted.

			trap "rm -rf $TMP_MNT/$STORE/${IMAGE%%\/*}" INT

			[ -f $URL ] &&
				cp $URL $TMP_MNT/$STORE/$IMAGE/$ACTIVE_IMAGE ||
				axel -a -o $TMP_MNT/$STORE/$IMAGE/$ACTIVE_IMAGE $URL

		) || error "Failed to deploy $IMAGE."

		_print "Successfully deployed $IMAGE."

	;;

	update)

		[ $# -ne 3 ] &&
			error "Bad command: wrong number of arguments."

		_mount
		_print "Updating $IMAGE."

		cd $TMP_MNT/$STORE/$IMAGE ||
			error "\e[32m$IMAGE\e[0m is not deployed."

		UPDATE_URL=$(dd if=$ACTIVE_IMAGE bs=1 skip=33651 count=512 2> /dev/null)

		[ ${#UPDATE_URL} -eq 0 ] &&
			error "Unable to gather update information from $IMAGE. Aborting update."

		zsync ${UPDATE_URL/zsync|} -o $ACTIVE_IMAGE ||
			error "Failed to update $IMAGE."

		_print "Successfully updated $IMAGE."

	;;

	revert)

		[ $# -ne 3 ] &&
			error "Bad command: wrong number of arguments."

		_mount
		_print "Reverting last update of $IMAGE."

		cd $TMP_MNT/$STORE/$IMAGE ||
			error "$IMAGE is not deployed."

		mv -f $BACKUP_IMAGE $ACTIVE_IMAGE ||
			error "Couldn't perform a rollback on $IMAGE."

		_print "Sucessfully performed rollback on $IMAGE."

	;;

	reset)

		[ $# -ne 3 ] &&
			error "Bad command: wrong number of arguments."

		_mount
		_print "Resetting $IMAGE."

		rm -rf $TMP_MNT/$STORE/$IMAGE/DATA/* ||
			error "Failed to reset $IMAGE."

		_print "Successfully resetted $IMAGE."

	;;

	clean)

		[ $# -ne 3 ] &&
			error "Bad command: wrong number of arguments."

		_mount
		_print "Cleaning $IMAGE."

		cd $TMP_MNT/$STORE/$IMAGE ||
			error "$IMAGE is not deployed."

		rm -f $BACKUP_IMAGE
		_print "Sucessfully cleaned $IMAGE."

	;;

	remove)

		[ $# -ne 3 ] &&
			error "Bad command: wrong number of arguments."

		_mount
		_print "Removing $IMAGE."

		[ -d $TMP_MNT/$STORE/$IMAGE ] ||
			error "$IMAGE is not deployed."

		rm -rf $TMP_MNT/$STORE/$IMAGE
		_print "Successfully removed $IMAGE."

	;;

	stats)

		[ $# -ne 2 ] &&
			error "Bad command: wrong number of arguments."

		_mount

		cd $TMP_MNT/$STORE/$IMAGE ||
			error "$IMAGE is not deployed."

		printf "Image size: $(ls -sh $ACTIVE_IMAGE | cut -d ' ' -f 1).\n"
		printf "Last update: %$(date -u -r $ACTIVE_IMAGE).\n"

		[ -f $BACKUP_IMAGE ] &&
			printf "Backup size: $(ls -sh $BACKUP_IMAGE | cut -d ' ' -f 1).\n"

	;;

	list)

		[ $# -ne 2 ] &&
			error "Bad command: wrong number of arguments."

		_mount

		cd $TMP_MNT/$STORE
		ls -1 -d */*

	;;

	-h|--help|help)

		printf "$HELP"

	;;

	-v|--version|version)

		printf "$VERSION\n"

	;;

	*)

		error "No such command '$COMMAND'."

	;;

esac
